 <!-- cool way -->
    ctrl + d , shift + ctrl + right arrow , shift  + alt + left arrow, shift + left arrow, shift + {{}}, shift + 9 for )()

// model with migration 
php artisan make:model Post -m  

//relation
every single post has many tags  

//storage link
php artisan storage:link


// ===================== Authentication system ===============
1. php artisan make:auth

44 Auth::routes() -> Auth.php: -> 
static::$app->make('router')->auth(); -> Router.php
1007 public function auth() 

============================== admin auth system ================
router.php 

copy auth folder and past inside admin folder  

// Admin Auth Routes 
	Route::get('admin-login', 'Auth\LoginController@showLoginForm')->name('admin.login');  
	Route::post('admin-login', 'Auth\LoginController@login'); //->name('admin.login')

logincontroller -> use AuthenticatesUsers -> trait AuthenticatesUsers ->    
/**
     * Show the application's login form.
     *
     * @return \Illuminate\Http\Response
     */
    public function showLoginForm()
    {
        return view('admin.login');
    }

    /**
     * Handle a login request to the application.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Http\Response
     */
    public function login(Request $request)
    {
        $this->validateLogin($request);
        if ($this->attemptLogin($request)) {
            return $this->sendLoginResponse($request);
        }
        return $this->sendFailedLoginResponse($request);
    }

    # config.php -> auth.php
    'guards' => [
        'admin' => [
            'driver' => 'session',
            'provider' => 'admins',
        ],

    ],

    'providers' => [
        'admins' => [
            'driver' => 'eloquent',
            'model' => App\Model\admin\Admin::class, 
        ],
    ],

    'passwords' => [
        'admins' => [
            'provider' => 'admins',
            'table' => 'password_resets',
            'expire' => 60,
        ],
    ],



    // logout 
     <a class="nav-link" href="{{ route('logout') }}" 
                      onclick="event.preventDefault();
                      document.getElementById('logout-form').submit();">
                      <i class="fa fa-sign-out"></i> Sign Out 
                  </a>
                  <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
                      {{ csrf_field() }}
                  </form>

// middleware    

app -> admin -> auth -> logincontroller -> 
 public function __construct()
    {
        $this->middleware('guest::admin')->except('logout'); //guest::admin
    }
app -> http -> middleware ->redirectIfAuthenticate -> 


// admin/home  redirect problem 
Exception -> handler -> 


// permission 
php artisan make:model Model/admin/Permission -m -r  


// role and permission relation


// admin_role not admin_roles


// status 0 login message 
  login controller :
 /**
     * Get the needed authorization credentials from the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    protected function credentials(Request $request)
    {
        $admin = Admin::where('email' $request->email)->first();
        if($admin->status == 0) {
            return ['email' => $request->email, 'password' => 'You are not an active person, please contact Admin'];
        } else {
            return ['email' => 'inactive', 'password' => $request->password, 'status' => 1 ];
        }
    }


    AuthernticatesUser.php
     protected function sendFailedLoginResponse(Request $request)
    {
        
        $fields = $this->credeintials($request); // login message custom 
        if($fields['eemail'] == 'inactive') {
            $errors->$fields->password; 
        } else {
            $errors = [$this->username() => trans('auth.failed')];
        }

        if ($request->expectsJson()) {
            return response()->json($errors, 422);
        }

        return redirect()->back()
            ->withInput($request->only($this->username(), 'remember'))
            ->withErrors($errors);
    }


    //gates 

    app -> providers -> authservices providers 

  inside boot mehod 
  // custom gate
        Gate::resource('posts', 'PostPolicy'); 
    php artisan make:policy PostPolicy --model=Post


    // vue js compile
    npm install
    npm run watch  

    //like and dislike not complete